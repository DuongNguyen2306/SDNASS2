const { apiConfig, examples } = require('./api-config');

// Colors cho console
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testAPI() {
  log('\nüöÄ B·∫Øt ƒë·∫ßu test API...', 'blue');
  
  try {
    // Test 1: Health check
    log('\n1. Testing Health Check...', 'yellow');
    const health = await apiConfig.info.healthCheck();
    log(`‚úÖ Health check: ${health.data?.status || health.status || 'OK'}`, 'green');
    
    // Test 2: API Info
    log('\n2. Testing API Info...', 'yellow');
    const info = await apiConfig.info.getApiInfo();
    log(`‚úÖ API Info: ${info.data?.name || info.name || 'API'} v${info.data?.version || info.version || '1.0.0'}`, 'green');
    
    // Test 3: T·∫°o quiz
    log('\n3. Testing Create Quiz...', 'yellow');
    const quiz = await apiConfig.quizzes.create({
      title: 'Test Quiz - ' + new Date().toISOString(),
      description: 'Quiz ƒë∆∞·ª£c t·∫°o b·ªüi test script',
      questions: []
    });
    log(`‚úÖ Quiz ƒë√£ t·∫°o: ${quiz.title} (ID: ${quiz._id})`, 'green');
    
    // Test 4: T·∫°o questions
    log('\n4. Testing Create Questions...', 'yellow');
    const questions = [
      {
        text: 'Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√† g√¨?',
        options: ['H√† N·ªôi', 'TP.HCM', 'ƒê√† N·∫µng', 'Hu·∫ø'],
        correctAnswerIndex: 0,
        keywords: ['capital', 'vietnam', 'hanoi']
      },
      {
        text: 'Th·ªß ƒë√¥ c·ªßa Ph√°p l√† g√¨?',
        options: ['Lyon', 'Paris', 'Marseille', 'Toulouse'],
        correctAnswerIndex: 1,
        keywords: ['capital', 'france', 'paris']
      },
      {
        text: 'Th·ªß ƒë√¥ c·ªßa Nh·∫≠t B·∫£n l√† g√¨?',
        options: ['Osaka', 'Tokyo', 'Kyoto', 'Hiroshima'],
        correctAnswerIndex: 1,
        keywords: ['capital', 'japan', 'tokyo']
      }
    ];
    
    const createdQuestions = await apiConfig.quizzes.addQuestions(quiz._id, questions);
    log(`‚úÖ ƒê√£ th√™m ${createdQuestions.created.length} questions v√†o quiz`, 'green');
    
    // Test 5: L·∫•y quiz v·ªõi questions
    log('\n5. Testing Get Quiz with Questions...', 'yellow');
    const quizWithQuestions = await apiConfig.quizzes.getById(quiz._id);
    log(`‚úÖ Quiz c√≥ ${quizWithQuestions.questions.length} questions`, 'green');
    
    // Test 6: T√¨m questions ch·ª©a keyword "capital"
    log('\n6. Testing Search Capital Questions...', 'yellow');
    const capitalQuestions = await apiConfig.quizzes.getWithCapitalQuestions(quiz._id);
    log(`‚úÖ T√¨m th·∫•y ${capitalQuestions.data.questions.length} questions v·ªÅ th·ªß ƒë√¥`, 'green');
    
    // Test 7: C·∫≠p nh·∫≠t quiz
    log('\n7. Testing Update Quiz...', 'yellow');
    const updatedQuiz = await apiConfig.quizzes.update(quiz._id, {
      title: 'Updated Test Quiz - ' + new Date().toISOString(),
      description: 'Quiz ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
    });
    log(`‚úÖ Quiz ƒë√£ c·∫≠p nh·∫≠t: ${updatedQuiz.title}`, 'green');
    
    // Test 8: L·∫•y t·∫•t c·∫£ quiz
    log('\n8. Testing Get All Quizzes...', 'yellow');
    const allQuizzes = await apiConfig.quizzes.getAll();
    log(`‚úÖ T·ªïng c·ªông c√≥ ${allQuizzes.length} quiz`, 'green');
    
    // Test 9: L·∫•y t·∫•t c·∫£ questions
    log('\n9. Testing Get All Questions...', 'yellow');
    const allQuestions = await apiConfig.questions.getAll();
    log(`‚úÖ T·ªïng c·ªông c√≥ ${allQuestions.length} questions`, 'green');
    
    // Test 10: X√≥a quiz (cleanup)
    log('\n10. Testing Delete Quiz (Cleanup)...', 'yellow');
    const deleteResult = await apiConfig.quizzes.delete(quiz._id);
    log(`‚úÖ Quiz ƒë√£ x√≥a, removed ${deleteResult.removedQuestions.length} questions`, 'green');
    
    log('\nüéâ T·∫•t c·∫£ tests ƒë√£ ho√†n th√†nh th√†nh c√¥ng!', 'green');
    
  } catch (error) {
    log(`\n‚ùå Test failed: ${error.message}`, 'red');
    console.error('Chi ti·∫øt l·ªói:', error);
  }
}

// Ch·∫°y test
if (require.main === module) {
  testAPI();
}

module.exports = { testAPI };
